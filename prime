#!/bin/bash

_version=dev-22-12-15

function installCron(){
	echo "[Info] Installing the cron job"
	currentPath=`pwd`
	echo '''SHELL=/bin/bash
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
_boot=1 prime
''' >prime-boot
	echo "echo version=${_version}" >>prime-boot
	pkexec bash -c "mkdir -p /etc/cron.d && mv ${currentPath}/prime-boot /etc/cron.d"
}

function createBlacklist(){
	rm blacklist-nvidia.conf 2>/dev/null
	for list in 'blacklist nvidia' "blacklist nvidia-drm" "blacklist nvidia_uvm" "blacklist nvidia-modeset" "blacklist nouveau" "install nvidia /bin/false"; do
		echo ${list} >>blacklist-nvidia.conf
	done
}

function installBlacklist(){
	echo "[Info] Installing blacklist rule"
	currentPath=`pwd`
	createBlacklist
	pkexec bash -c "mv ${currentPath}/blacklist-nvidia.conf /etc/modprobe.d"
}

function primeModprobe(){
	modprobe $@
	statusCode=$?
	if [ ${statusCode} = 0 ]; then
		echo "[Info] modprobe success"
	else
		echo "[Critical] modprobe returned error ${statusCode}, make sure NVIDIA drivers are installed. If you updated your kernel recently, reboot then try again."
		sendNotify "Failed to load kernel modules" "Check if NVIDIA drivers are installed and reboot"
		exit ${statusCode}
	fi
}

function findCard(){
	pciDevice=`lspci | grep -i nvidia | awk '{print $1}'`
}

function sendNotify(){
	notify-send -a Prime "$1" "$2"
}

function checkBlacklist(){
	createBlacklist
	if [[ -f /etc/modprobe.d/blacklist-nvidia.conf ]]; then
		echo "[Info] Blacklist installed"
	else
		installBlacklist
	fi
	if [[ `cat /etc/modprobe.d/blacklist-nvidia.conf` = `cat blacklist-nvidia.conf` ]]; then
		echo "[Info] Blacklist up to date"
	else
		installBlacklist
	fi
	rm blacklist-nvidia.conf
}

function checkCron(){
	if [[ ! -f /etc/cron.d/prime-boot ]]; then
		echo "[Warn] Cron job missing"
		installCron
	fi
# 	if [[ `cat /etc/cron.d/prime-boot` =~ ${_version} ]]; then
# 		echo "[Info] Cron job up to date"
# 	else
# 		echo "[Warn] Cron job is outdated"
# 		installCron
# 	fi
}

function powerUp(){
	checkBlacklist
	checkCron
	echo "[Info] Rescanning PCI devices, loading kernel modules"
	sendNotify "Loading NVIDIA modules" "Triggering modprobe"
	pkexec bash -c 'tee /sys/bus/pci/rescan <<< 1 && modprobe nvidia nvidia_uvm nvidia_drm nvidia_modeset --ignore-install'
}

function verifyLsof(){
	lsof -h 1>/dev/null 2>/dev/null
	if [[ $? != 0 ]]; then
		echo "[Warn] Command lsof returned error code $?, NVIDIA drivers may not be unloaded properly"
		sendNotify "Command lsof returned error code $?" "NVIDIA drivers may not be unloaded properly"
		return 1
	fi
}

function unloadModule(){
	echo "[Info] Removing kernel modules"
	echo "[Info] Enabling power control"
	screenQuene "modprobe nvidia_uvm nvidia_drm nvidia_modeset nvidia -r && echo 'auto' > /sys/bus/pci/devices/0000:${pciDevice}/power/control"
	screenRun
}

function checkPowerDown(){
	nvidia-smi 1>/dev/null 2>/dev/null
	if [ $? = 9 ]; then
		echo "[Info] NVIDIA-SMI cannot reach drivers, successfully shutted down"
		sendNotify "Drivers shutted down" "Current power state: `cat /sys/bus/pci/devices/0000:${pciDevice}/power_state`"
	else
		echo "[Warn] Unable to shutdown NVIDIA drivers"
		sleep 1s
		echo "[Warn] Current power state: `cat /sys/bus/pci/devices/0000:${pciDevice}/power_state`"
		sendNotify "Unable to shutdown drivers" "Current power state: `cat /sys/bus/pci/devices/0000:${pciDevice}/power_state`"
		return 114514
	fi
}

function createScreen(){
	screen -S prime -X quit
	screen -dmS prime
	screenId=`screen -ls | grep .prime | awk '{print $1}' | cut -d "." -f 1`
}

function screenQuene(){
	if [ ! ${screenId} ]; then
		echo '[Info] Creating screen process'
		createScreen
		screen -x ${screenId} -p 0 -X stuff "pkexec bash -c 'mkdir -p /var/cache/prime"
		screenQuene "echo 0 >/var/cache/prime/screenFinished"
	fi
	screen -x ${screenId} -p 0 -X stuff ' && '
	screen -x ${screenId} -p 0 -X stuff "$@"
}

function screenRun(){
	screenQuene 'echo confirm >/var/cache/prime/screenFinished'
	screenQuene 'sleep 2s'
# 	screenQuene 'echo 0 >/var/cache/prime/screenFinished'
	screenQuene 'rm -r /var/cache/prime'
	screen -x ${screenId} -p 0 -X stuff "'"
	screen -x ${screenId} -p 0 -X stuff '\r'
	_finished=0
	while [ ${_finished} = 0 ]; do
		if [[ `sleep 1s && cat /var/cache/prime/screenFinished 2>/dev/null` = 'confirm' ]]; then
			_finished=1
			echo '[Info] Screen process finished'
		fi
	done
	terminateScreen
}

function terminateScreen(){
	screen -x ${screenId} -p 0 -X stuff "exit"
	screen -x ${screenId} -p 0 -X stuff '\r'
	unset ${screenId}
}

function powerDown(){
	verifyLsof
	if [ $? = 1 ]; then
		unloadModule
		checkPowerDown
	fi
	sendNotify "Powering down NVIDIA GPU" "Shutting down drivers"
	if [[ `lsof -t /dev/nvidia*` ]]; then
		echo 'These apps are using your nvidia GPU'
		lsof /dev/nvidia*
		sleep 1s
		sendNotify "These apps will be killed" `lsof -F c /dev/nvidia* | awk '/^c/ { print substr($0,2)}'`
		sendNotify "Notice" "If prime failed to shutdown, you can run another prime instance to recover it"
#  		pkexec bash -c "lsof -t /dev/nvidia* | xargs kill && sleep 4s && modprobe nvidia_uvm nvidia_drm nvidia_modeset nvidia -r && echo 'auto' > /sys/bus/pci/devices/0000:${pciDevice}/power/control"
		screenQuene "lsof -t /dev/nvidia* | xargs kill && sleep 4s && modprobe nvidia_uvm nvidia_drm nvidia_modeset nvidia -r && echo 'auto' > /sys/bus/pci/devices/0000:${pciDevice}/power/control"
		screenRun
		checkPowerDown
	else
# 		pkexec bash -c "modprobe nvidia_uvm nvidia_drm nvidia_modeset nvidia -r && sleep 2s && echo 'auto' > /sys/bus/pci/devices/0000:${pciDevice}/power/control"
		screenQuene "modprobe nvidia_uvm nvidia_drm nvidia_modeset nvidia -r && sleep 1s && echo 'auto' > /sys/bus/pci/devices/0000:${pciDevice}/power/control"
		screenRun
		checkPowerDown
	fi
}

function firstUse(){
	currentPath=`pwd`
	echo '''SHELL=/bin/bash
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
_boot=1 prime
''' >prime-boot
	echo "echo version=${_version}" >>prime-boot
	createBlacklist
	pkexec bash -c "mkdir -p /etc/cron.d && mv ${currentPath}/prime-boot /etc/cron.d && mv ${currentPath}/blacklist-nvidia.conf /etc/modprobe.d && systemctl enable --now cronie"
 	sendNotify "Prime configured" "Restart your PC"
}

unset screenId
findCard
if [[ $1 = '--first-use' ]]; then
	firstUse
	exit $?
fi

if [[ $1 = '--force-down' ]]; then
	powerDown
	exit $?
fi

if [ ! ${_dGPUApp} ]; then
        export _dGPUApp=0
fi
if [[ ${_boot} = 1 ]]; then
	findCard
	unset _boot
	echo 'auto' > /sys/bus/pci/devices/0000:${pciDevice}/power/control
fi
if [ ! $_render ]; then
        echo 'Set $_render to all, display, vulkan'
        exit 1
fi
export _dGPUApp=`expr ${_dGPUApp} + 1`
powerUp
if [ $_render = all ]; then
        __NV_PRIME_RENDER_OFFLOAD=1 __VK_LAYER_NV_optimus=NVIDIA_only __GLX_VENDOR_LIBRARY_NAME=nvidia VK_ICD_FILENAMES=/usr/share/vulkan/icd.d/nvidia_icd.json "$@"
elif [ $_render = display ]; then
        __NV_PRIME_RENDER_OFFLOAD=1 __VK_LAYER_NV_optimus=NVIDIA_only __GLX_VENDOR_LIBRARY_NAME=nvidia "$@"
elif [ $_render = vulkan ]; then
        VK_ICD_FILENAMES=/usr/share/vulkan/icd.d/nvidia_icd.json "$@"
fi
sleep 2s
export _dGPUApp=`expr ${_dGPUApp} - 1`
powerDown
